---
title: "Wethern, Sublocade + Lidocaine 2024"

# format: 
#   docx:
#     reference-doc: "./custom-reference-doc.docx"
#     fig-dpi: 600

format:
  html:
    embed-resources: true
    toc: true

execute: 
  echo: false
---

```{python}
from great_tables import GT, md, html
import statsmodels.api as sm
import statsmodels.formula.api as smf
import scipy.stats as stats
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
```

```{python}
# Import .csv file
# os.getcwd()
data = (
  pd.read_csv('../data/sublocade_lidocaine.csv')
  .reset_index()
  )
```

# Question 1
On a scale from 0 to 10, what do you rate your pain when given Sublocade without the use of lidocaine? * 0 means no pain and 10 means the worst pain you have ever felt.`
```{python}
# Create a table of descriptive statistics for Question 1
tab1 = (data['Question 1']
  .describe()
  .reset_index()
  .rename(columns = {'index': 'Descriptive'})
  .round(2)
)

# Rename count to non-missing
tab1['Descriptive'] = tab1['Descriptive'].str.replace('count', 'non-missing')

# Get the total data.shape[0]
new_row = pd.DataFrame({'Descriptive': ['total'], 'Question 1': [str(data.shape[0])]})

# Prepend the new row with the total
tab1 = new_row._append(tab1, ignore_index = True)

GT(tab1)
```

# Question 2
On a scale from 0 to 10, what do you rate your pain when given Sublocade with the use of lidocaine via J-TIP device? * 0 means no pain and 10 means the worst pain you have ever felt.
```{python}
# Create a table of descriptive statistics for Question 2
tab2 = (data['Question 2']
  .describe()
  .reset_index()
  .rename(columns = {'index': 'Descriptive'})
  .round(2)
)

# Rename count to non-missing
tab2['Descriptive'] = tab2['Descriptive'].str.replace('count', 'non-missing')

# Get the total data.shape[0]
new_row = pd.DataFrame({'Descriptive': ['total'], 'Question 2': [str(data.shape[0])]})

# Prepend the new row with the total
tab2 = new_row._append(tab2, ignore_index = True)

GT(tab2)
```

# Linear mixed effect model
```{python}
#### CREATE A DATA SET SPECIFIC FOR MODELING ####
# Create a column called id from the index
data['id'] = data['index']

# Select only the columns of interest
df = data[['id', 'Question 1', 'Question 2']]

# Createa a long version of the data
df = (pd.wide_to_long(df, stubnames = 'Question ', i = 'id', j = 'question')
      .reset_index()
      )

# Create the column called pain from Question
df = df.rename(columns={'Question ': 'pain'})

# Dropping missing values before modeling
df = df[df.pain.notnull()]

# Recode the values of question to make summary output more interpretable
df = df.replace({'question': {1: 0, 2:1}})
```

```{python}
# Set a model formula
md = smf.mixedlm('pain ~ question', df, groups = df['id'])

# Fit the model
mdf = md.fit()

# Display the summary print() for R-style output
mdf.summary()

# https://stats.stackexchange.com/questions/244000/understand-summary-from-statsmodels-mixedlm-function
```

There is a significant difference in pain scores between Question 1 and Question 2 (z = -15.6, P < 0.0001). Pain scores from Question 2 were estimated to be 4.694 units lower than pain scores in Question 1 (95% CI: -5.284 to -4.104). * z values represent parameter estimates divided by the standard error.
```{python}
#| eval: false
# Display the mean predicted values with no random effects
# The difference of the means should be equivalent to the coefficient
# in the model output
(pd.DataFrame({'question': df['question'], 
               'fitted': mdf.predict()})
   .groupby('question')
   .agg({'fitted': 'mean'})
)
```

# Figure
Mean Pain Score (+/- se)
```{python}
fig = sns.pointplot(data = df, x = 'question', y = 'pain', errorbar = 'se', capsize = .05)
fig.set(xlabel = 'Question', ylabel = 'Pain Score')
fig.set_xticks([0, 1]) # Sets the x ticks manually for label modification
fig.set_xticklabels([1, 2]) # Modify the x tick labels
fig.set(ylim=(0,10))
sns.despine(bottom = False, left = False, top = True, right = True)
plt.show() # Prevents extra text from displaying
```

# Complete cases
```{python}
comp_cases = data.copy()
comp_cases.dropna(subset=['Question 1', 'Question 2'], inplace = True)
```

```{python}
GT(pd.DataFrame({'Descriptive': ['Complete Cases'], 'N': [str(comp_cases.shape[0])]}))
```

# Paired samples t-test
```{python}
result = stats.ttest_rel(comp_cases['Question 1'], comp_cases['Question 2'])
```

```{python}
# Set each outcome column as a separate pd.series
x1 = comp_cases['Question 1']
x2 = comp_cases['Question 2']

# Return a data frame assembled from results
ttab = pd.DataFrame.from_dict(
  {
  "N Q1":         [x1.size],
  "Mean Q1":      [x1.mean().round(2)],
  "Std Q1":       [x1.std().round(2)],
  "N Q2":         [x2.size], 
  "Mean Q2":      [x2.mean().round(2)],
  "Std Q2":       [x2.std().round(2)],
  "Tstat":        [result.statistic.round(2)],
  "Pval":         [result.pvalue .round(2)],
  "df":           [result.df],
  }
).reset_index(drop=True)

GT(ttab)
```

```{python}
# Calculate the mean difference and standard error
mean_diff = np.mean(x1 - x2)
se_diff = stats.sem(x1 - x2)

# Calculate the degrees of freedom
df = result.df

# Calculate the confidence interval
ci = stats.t.interval(confidence=0.95, df=df, loc=mean_diff, scale=se_diff)

# Create a table of the mean difference and 95% CI
dtab = pd.DataFrame.from_dict(
  {
    "Mean Difference": [mean_diff.round(2)],
    "[0.025": [ci[0].round(2)],
    "0.975]": [ci[1].round(2)]
  }
)

GT(dtab)
```

```{python}
# Export data to csv to verify results with R
# df.to_csv("../data/long_data_clean.csv", index = False)
```